==============
Statistics API
==============

for controlling CIA over XML-RPC
================================

"stats" Namespace
-----------------

**stats.catalog** ( *string* path="" ) > [ *string* name, ... ]

  Retrieves a listing of all meaningful stats path segments
  within the given path. This returns a list of strings, each
  of which can be joined to the provided path to form a complete
  stats target.

  Python example::

    >>> import xmlrpclib
    >>> cia = xmlrpclib.ServerProxy("https://cia.navi.cx")

    >>> cia.stats.catalog()
    ['author', 'format', 'host', 'project', 'total', 'vcs']

    >>> cia.stats.catalog('vcs')
    ['arch', 'bitkeeper', 'cvs', 'darcs', 'other', 'subversion']

    >>> cia.stats.catalog('project/e')
    ['CVSROOT', 'e16', 'e17', 'eterm', 'misc', 'web']


**stats.getLatestMessages** ( *string* path, *int* limit=None ) > [ [*int* id, *string* xml], ... ]

  Retrieves the most recent messages stored for a particular stats
  target, returning each as a list containing that message's ID and its full XML text.
  Message IDs are guaranteed to be unique within a particular CIA server.
  If a limit is provided, that sets the maximum number of messages returned.
  Otherwise, this returns all messages stored by the database for this target.

  Note that the database is periodically pruned-- CIA does not aim to store
  complete commit histories for any project.  Please keep the message limit
  small unless you have a good reason to leave it unset or very large, to
  reduce server load. within the given path. This returns a list of strings, each
  of which can be joined to the provided path to form a complete stats target.

  Once retrieved, these XML messages can be parsed and formatted in a number
  of ways. The *LibCIA.Message* and *LibCIA.Formatters* Python packages
  included with CIA's source can be used to apply the same formatting methods
  used server-side. You could also use an XSLT transformation, or a custom
  hardcoded formatter using any XML processing package.

  Python example::

    >>> import xmlrpclib
    >>> cia = xmlrpclib.ServerProxy("https://cia.navi.cx")

    >>> latestFiveCommits = cia.stats.getLatestMessages('total/commits', 5)
    >>> len(latestFiveCommits)
    5

    >>> latestCommitID, latestCommitContent = latestFiveCommits[0]
    >>> print latestCommitID
    4829639
    >>> print latestCommitContent
    <?xml version="1.0" ?>
    <message>
       <generator>
           <name>CIA Perl client for CVS</name>
    ...


**stats.getCounterValues** ( *string* path, *string* counterName ) > { *string* attribute, *int* value }

  Every stats target has a set of "counters" associated with it that,
  over a preset time interval, capture a count of messages and bounds
  for the message timestamps during that interval.

  The following counter names are used:

    * *forever*: This counter is never cleared. It can be used to retrieve
      a total event count, or unconditionally retrieve timestamps for the
      earliest or latest messages.

    * *today*: Cleared every day at midnight, UTC time.

    * *thisWeek*: Cleared weekly, Monday mornings at midnight UTC.

    * *thisMonth*: Cleared on the first of every month at midnight UTC.

  Every counter, when queried, returns a mapping from attribute names to integer
  values. The following attribute names are used:

    * *firstEventTime*: The time, in UTC seconds since the UNIX epoch, when
      the first event occurred for this counter.

    * *lastEventTime*: The time when the most recent event occurred.

    * *eventCount*: The number of events that have occurred.

  Python example::

    >>> import xmlrpclib, time
    >>> cia = xmlrpclib.ServerProxy("https://cia.navi.cx")

    >>> n = cia.stats.getCounterValues('project/gnome', 'thisWeek')['eventCount']
    >>> print "There have been %d commits to GNOME this week." % n
    There have been 178 commits to GNOME this week.

    >>> n = cia.stats.getCounterValues('total/commits', 'forever')['lastEventTime']
    >>> print "The most recent commit was at %s (local time)" % time.ctime(n)
    The most recent commit was at Tue Mar 29 00:44:22 2005 (local time)


**stats.clearTarget** ( *string* capabilityKey, *string* path ) > True

  Permanently deletes all stats data stored at or under the provided path.
  This is a protected function. The capability key must, at minimum, have
  full access to the stats path being cleared. A full list of acceptable
  capabilities will be returned via an exception if the key is insufficient.

  Python example::

    >>> import xmlrpclib, os
    >>> cia = xmlrpclib.ServerProxy("https://cia.navi.cx")
    >>> key = open(os.path.expanduser("~/.cia_key")).read()

    >>> cia.stats.clearTarget(key, "project/DeleteMe")
    True


"stats.metadata" Namespace
--------------------------

FIXME

"stats.subscribe" Namespace
---------------------------

FIXME
