To-do List
==========

New Web Interface
-----------------

There is a new web interface under development, using Django. It will eventually
replace the old web interface entirely, but it's currently only used for managing
user accounts and assets (such as bots, projects, and authors).

- "Coming Soon" features:

  - Exclusive access

  - The ability to revert changes from the change history page.

- Ruleset editor improvements:

  - Automatically size the ruleset editor textarea to fit the screen?

  - Ruleset indentation (automatic, and manual- support for the Tab key)

  - Ruleset error/syntax hilighting using CodePress (which apparently does indeed work on Safari)


Deep Changes
------------

- Separate the HTTP frontend from the message delivery engine. The message delivery
  engine itself should be a separate daemon, preferably something that can be scaled
  well. This means more efficient algorithms for ruleset matching, and seamless
  interaction between multiple message delivery hosts. This daemon has been codenamed
  Esquilax_.

- The IRC bot server is another scalability and reliability bottleneck. I'd like the
  entire bot server to be a "disposable" daemon, which keeps all its connection state
  and the sockets itself in a separate simple process. The codename for this socket
  broker daemon is Caterpillar_.

The wiki pages linked above are really just my own notes on the subject- they are
a little disorganized, and subject to change. If you'd like to contribute to any of
these projects or you're curious how they work, please contact Micah_ directly.

.. _Micah: mailto:micah@navi.cx
.. _Esquilax: http://zero.navi.cx/wiki/index.php/Esquilax
.. _Caterpillar: http://zero.navi.cx/wiki/index.php/CaterpillarDaemon

Fires to put out
----------------

- The Python mailing list filter is broken, and it has been for a while

Messages
--------

- Clean up the versioning in messages so the semantics are clear. Arch
  revisions like rhythmbox-devel@gnome.org--2004/rhythmbox--main--0.7--patch-17
  and subversion revisions like r3962 could be represented using <version style="arch">
  and <version style="svn"> tags, respectively. CVS could include a tag like
  <version style="cvs">1.1.23</version> inside each <file>. BitKeeper would probably
  use something similar to svn's revisions.

- Make it possible for modular formatters to treat the files prefix and the rest
  of the file summary differently

- Add message delivery information to the XML-RPC hub.deliver() frontend. It should
  add a header in <generator> indicating the IP, hostname, and/or user agent of the sender.
  This can be used by rulesets like stats://host.

Documentation
-------------

- Add examples and definitions for messages of various types, and rulesets

- Good ruleset documentation, including the recent Modular Formatters

- Add some more info on the XML-RPC interface. There's a little `API Documentation`_
  but it's incomplete.

.. _API Documentation: /doc/api/index


Old Web Interface
-----------------

- Make CIA more accessable to text browsers and non-CSS browsers. This probably
  means using some tricks like Plone does to have headings and links that are hidden when
  using CSS, and making headings and tabs into <h1> tags and <li> tags rather than
  just <div>s and such.

- Clean up the CSS. It still uses tables to position the heading and the columns,
  where it should be using CSS positioning.

- Some of the stats catalogs are getting rather big and it would be good
  to make the full message list accessable and searchable. An SQL-aware table
  widget for this has been started in the cia-data-driven-tables branch.

  - While implementing the searchability for these new tables, it would be possible
    for example to make URLs that query for commits between two dates. That would be
    a handy thing to have for ChipX86's status reports :)

- Clean up the relation graphing interface so it isn't stuck hackishly at /graph.
  Maybe stats metadata could be used to attach graphs to individual targets?

- Possibly allow anyone to edit metadata before a project has been 'claimed' by one person
  and assigned a key?

- Implement a web interface for editing rulesets. This should be fairly easy
  since the Keyring object was implemented for the metadata editor.

- rrdtool (or similar) for graphing stats target activity

- Link from authors and projects in the stats browser's message lists to the appropriate
  author and project pages. It would be great to, while browsing a project, be able
  to easily see what a particular person is working on elsewhere. A few things to consider:

    - stats metadata could be used to make the connection without hardcoding
      any assumptions about the stats hierarchy into CIA, but where do these go?

    - How do we account for any differences in commit authors with stats author
      pages, as caused by the ruleset?

  One potential solution is, for each potentially linkable part of the commit message,
  the formatter (or some preprocessor that the runs before the formatter) looks for a
  stats:// ruleset using that part of the message in a path= attribute. If it finds one,
  it hyperlinks to the stats target that results from running the message through that
  ruleset. If there are multiple messages with matching path= attributes, it would have
  some way to determine which one is best.

IRC
---

- Bots will rejoin when kicked from a channel, they need to remove or disable their
  irc:// ruleset.

  This will become important once the web interface for IRC ruleset editing
  is written- if someone invites a CIA bot into a channel where it isn't
  wanted, the channel's ops need to be able to ask it to leave. As it is
  now, the botnet tries a little too hard and the bot will
  just immediately rejoin.

- Track bandwidth averages per-request and per-bot. This could be used to load balance
  the bots by rearranging requests among them, and it would make a nice indicator
  for the IRC status page

