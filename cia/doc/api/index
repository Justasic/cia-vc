=====================================
The Application Programming Interface
=====================================

for accessing CIA remotely via XML-RPC
======================================

Introduction
------------

If you currently work on an application that needs to access CIA's
data directly, there may be a better way to implement it. The CIA
server has long supported an undocumented XML-RPC interface. This is
the same interface used by most CIA clients to deliver new commits.

The entire interface has not been finalized. Functions presented here
are considered stable- they aren't likely to change, and any changes
should remain backward compatible. Many other functions are supported,
but aren't finalized. Also note that the availability of XML-RPC
functions may vary from server to server. This list is consistent with
the official CIA server at http://cia.vc but individual server
owners may customize the RPC modules provided by their .tac file.

Accessing the Server
--------------------

The XML-RPC server runs at /RPC2 on the CIA server's usual HTTP port.
The official server, for example, provides XML-RPC at <http://cia.vc/RPC2>.
It is strongly recommended, but not strictly required, that clients use
SSL when executing functions that require authentication. The official
server provides an identical SSL service at <https://cia.vc/RPC2>.
Note that some XML-RPC clients, including Python's xmlrpclib_, will
implicitly assume /RPC2 if a URL is given with no path and no trailing slash.

Examples here will be given in Python, using the xmlrpclib_ module.
The XML-RPC interface should be usable from any language with an available
XML-RPC client, but Python makes a convenient language for these short
code snippets. It is also very easy to poke at the CIA server using
Python's interactive command line::

  Python 2.4 (#1, Feb  6 2005, 18:01:47) 
  [GCC 3.3.4 20040623 (Gentoo Linux 3.3.4-r1, ssp-3.3.2-2, pie-8.7.6)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import xmlrpclib
  >>> cia = xmlrpclib.ServerProxy("https://cia.vc")
  >>> cia.stats.getCounterValues("project/gnome", "forever")
  {'firstEventTime': 1073733315, 'lastEventTime': 1112073700, 'eventCount': 99509}

Common Concepts
---------------

* Stats Targets

  Any part of the XML-RPC API that works with stored statistics uses
  a common set of terminology. A stats "target" is a single destination
  where messages can be stored in the stats database. Every stats target
  shows up as a single page in the web interface. Targets are arranged
  in a tree, and every target is identified by a path.

  These paths and the hierarchy they represent should be familiar from
  the web interface. For example, the page
  http://cia.vc/stats/project/bzflag corresponds with the stats
  path "project/bzflag". Most useful stats paths are of the form
  "project/foo" or "author/foo", but paths like "total/commits" or
  "project/gnome/gimp" are valid and useful as well.

  The full list of stats targets available can be browsed via the
  web interface, or via the XML-RPC interface itself. The root
  of the stats tree has the empty string as its path. Note that the
  actual paths available are defined by stats:// rulesets, so they
  will vary depending on the individual CIA server configuration.

* Authentication

  Many API functions are declared by the server as "protected". These
  functions define some set of capabilities that can be used to gain
  access to themselves. When calling a protected function, the first
  argument is always a CIA key. If this key has access to any capabilities
  that will grant access to the function, it runs normally. If not, an
  exception is raised.

  The key is passed as a 24-character string of "unguessable" random
  data, assigned by an administrator or other user with privileges to
  grant them. Any time a key is passed to the CIA server, please use
  a connection with SSL to reduce the chance that your key is
  compromised.

Functions
---------

All functions in the XML-RPC API are arranged in a period-delimited
hierarchy. Using xmlrpclib_ this gives it a feel very similar to
a hierarchy of Python packages. With other XML-RPC clients, it may
be necessary to quote the entire name of a function and pass it
as a string. For example, "stats.catalog" or "stats.metadata.get".

API functions are documented in the following categories:

  * `Message Delivery Hub`_
  * `E-Mail Parsing`_
  * `Rulesets`_
  * `Statistics`_
  * `Security`_
  * `Debugging`_

.. _Message Delivery Hub: /doc/api/hub
.. _E-Mail Parsing: /doc/api/mail
.. _Rulesets: /doc/api/ruleset
.. _Statistics: /doc/api/stats
.. _Security: /doc/api/security
.. _Debugging: /doc/api/debug

.. _xmlrpclib: http://docs.python.org/lib/module-xmlrpclib.html

